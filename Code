import tkinter as tk
from tkinter import messagebox
import nlpcloud
from langdetect import detect

LANGUAGES = {
    "en": "English", "fr": "French", "de": "German", "es": "Spanish", "it": "Italian",
    "pt": "Portuguese", "nl": "Dutch", "ru": "Russian", "zh": "Chinese", "ja": "Japanese",
    "ko": "Korean", "ar": "Arabic", "hi": "Hindi", "bn": "Bengali", "pa": "Punjabi",
    "jv": "Javanese", "te": "Telugu", "vi": "Vietnamese", "ta": "Tamil", "mr": "Marathi",
    "tr": "Turkish",
}

class NLPAppGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("NLP Cloud App - Abdul Raheem")
        self.root.geometry("500x500")
        self.root.config(bg="#0f0f0f")
        self.__database = {}
        self.__current_menu()

    def __current_menu(self):
        self.clear_screen()

        header_label = tk.Label(self.root, text="Welcome to NLP Cloud App", font=("Arial Rounded MT Bold", 20), fg="#00ffe7", bg="#0f0f0f")
        header_label.pack(pady=20)

        sub_label = tk.Label(self.root, text="Hi, how would you like to proceed?", font=("Arial", 14), fg="white", bg="#0f0f0f")
        sub_label.pack(pady=10)

        self.custom_button("Register (New User)", self.__register_menu)
        self.custom_button("Login (Existing User)", self.__login_menu)
        self.custom_button("Exit", self.root.quit)

    def clear_screen(self):
        for widget in self.root.winfo_children():
            widget.destroy()

    def custom_button(self, text, command):
        button = tk.Button(self.root, text=text, command=command, width=25, height=2, bg="#00ffe7", fg="#0f0f0f", font=("Arial", 12, "bold"), bd=0, activebackground="#00ccaa")
        button.pack(pady=8)

    def __register_menu(self):
        self.clear_screen()
        self.form_header("Register New User")

        name_entry = self.custom_entry("Name:")
        email_entry = self.custom_entry("Email:")
        password_entry = self.custom_entry("Password:", show="*")

        self.custom_button("Register", lambda: self.__register(name_entry, email_entry, password_entry))
        self.custom_button("Back", self.__current_menu)

    def __register(self, name_entry, email_entry, password_entry):
        name = name_entry.get()
        email = email_entry.get()
        password = password_entry.get()

        if email in self.__database:
            messagebox.showerror("Error", "Email already exists.")
        else:
            self.__database[email] = [name, password]
            messagebox.showinfo("Success", "Registration successful! Please login.")
            self.__login_menu()

    def __login_menu(self):
        self.clear_screen()
        self.form_header("User Login")

        email_entry = self.custom_entry("Email:")
        password_entry = self.custom_entry("Password:", show="*")

        self.custom_button("Login", lambda: self.__login(email_entry, password_entry))
        self.custom_button("Back", self.__current_menu)

    def __login(self, email_entry, password_entry):
        email = email_entry.get()
        password = password_entry.get()

        if email in self.__database and self.__database[email][1] == password:
            messagebox.showinfo("Success", "Login successful!")
            self.__second_menu()
        else:
            messagebox.showerror("Error", "Incorrect email or password.")

    def __second_menu(self):
        self.clear_screen()

        label = tk.Label(self.root, text="Select an NLP Task", font=("Arial Rounded MT Bold", 18), fg="#00ffe7", bg="#0f0f0f")
        label.pack(pady=20)

        self.custom_button("Sentiment Analysis", self.__sentiment_analysis_menu)
        self.custom_button("Language Detection", self.__language_detection_menu)
        self.custom_button("Logout", self.__current_menu)

    def __sentiment_analysis_menu(self):
        self.clear_screen()
        self.form_header("Sentiment Analysis")

        para_entry = self.custom_entry("Enter text:")

        self.custom_button("Analyze Sentiment", lambda: self.__sentiment_analysis(para_entry))
        self.custom_button("Back", self.__second_menu)

    def __sentiment_analysis(self, para_entry):
        para = para_entry.get()
        client = nlpcloud.Client('distilbert-base-uncased-emotion', '7b8a4ab00b4031a7f5c9468c560e3a8bb0efb456', gpu=False)

        response = client.sentiment(para)
        scores = response.get('scored_labels', [])

        if scores:
            sorted_scores = sorted(scores, key=lambda x: x['score'], reverse=True)
            top_2_sentiments = sorted_scores[:2]
            result = "\n".join([f"{sentiment['label']} with score {sentiment['score']:.2f}" for sentiment in top_2_sentiments])
            messagebox.showinfo("Sentiment Result", result)
        else:
            messagebox.showinfo("Sentiment Result", "No sentiment detected.")
        self.__second_menu()

    def __language_detection_menu(self):
        self.clear_screen()
        self.form_header("Language Detection")

        para_entry = self.custom_entry("Enter text:")

        self.custom_button("Detect Language", lambda: self.__language_detection(para_entry))
        self.custom_button("Back", self.__second_menu)

    def __language_detection(self, para_entry):
        para = para_entry.get()
        try:
            language_code = detect(para)
            full_language_name = LANGUAGES.get(language_code, "Unknown Language")
            messagebox.showinfo("Language Detected", f"Detected language: {full_language_name} ({language_code})")
        except Exception as e:
            messagebox.showerror("Error", f"Error detecting language: {e}")
        self.__second_menu()

    def form_header(self, text):
        label = tk.Label(self.root, text=text, font=("Arial Rounded MT Bold", 18), fg="#00ffe7", bg="#0f0f0f")
        label.pack(pady=20)

    def custom_entry(self, label_text, show=None):
        label = tk.Label(self.root, text=label_text, font=("Arial", 12), fg="white", bg="#0f0f0f")
        label.pack(pady=5)
        entry = tk.Entry(self.root, width=30, show=show, bg="#222222", fg="#00ffe7", font=("Arial", 12), insertbackground="#00ffe7")
        entry.pack(pady=5)
        return entry

if __name__ == "__main__":
    root = tk.Tk()
    app = NLPAppGUI(root)
    root.mainloop()
